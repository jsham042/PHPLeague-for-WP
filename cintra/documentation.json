{
    "assets/css/phpleague-admin.css": "File Summary: adminpanel.css\n\nModule Overview:\n\n  Purpose: This file contains the CSS styles for the admin panel interface of the application.\n  Dependencies: None\n\nClasses:\n\n  N/A\n\nFunctions:\n\n  N/A\n\nThis file defines the styling for various elements of the admin panel interface, including the header, menu, content, and footer sections. It also includes styles for support links and different sections within the admin panel. The CSS rules in this file are used to ensure a consistent and visually appealing design for the admin panel of the application.",
    "assets/css/phpleague-admin.src.css": "File Summary: adminpanel.css\n\nModule Overview:\n\n  Purpose: This file contains the CSS styling rules for the admin panel interface of the application.\n  Dependencies: \n  - img/logo.png: Image file for the admin panel logo.\n  - img/admin-header.jpg: Image file for the admin panel header.\n  - img/ico-changelog.png, img/ico-docs.png, img/ico-forum.png: Icon images for support links.\n\nClasses: N/A\n\nFunctions: N/A\n\nFile Contents Overview:\nThis file defines the styling rules for various elements of the admin panel interface, including the header, menu, content, and footer sections. It also includes styling for support links and sections within the admin panel. The file uses specific selectors and properties to customize the appearance of the admin panel components, such as colors, backgrounds, borders, and text alignment. The file also includes references to image files for logos and icons used in the admin panel interface.",
    "assets/css/phpleague-front.css": "Target File: phpleague.php\n\nModule Overview:\n\n  Purpose: This module provides functionality for managing a PHP league, including displaying league standings and match results.\n  Dependencies: \n  - img: Directory containing images for league promotion, relegation, and qualifying.\n  \nClasses:\n\n  League:\n  - Purpose: Represents a PHP league with teams, standings, and match results.\n  - Attributes:\n    - teams (array): An array of team objects participating in the league.\n    - standings (array): An array of team standings in the league.\n    - matches (array): An array of match results in the league.\n  - Methods:\n    - display_standings() -> None: Displays the current standings of teams in the league.\n    - display_matches() -> None: Displays the results of matches played in the league.\n\nFunctions:\n\n  calculate_points(team: Team) -> int:\n  - Purpose: Calculates the total points earned by a team in the league.\n  - Arguments:\n    - team (Team): The team object for which points are to be calculated.\n  - Returns:\n    - int: The total points earned by the team.\n  - Exceptions:\n    - None\n\n  update_match_result(match: Match, result: str) -> None:\n  - Purpose: Updates the result of a match in the league.\n  - Arguments:\n    - match (Match): The match object to be updated.\n    - result (str): The result of the match (win, lose, draw).\n  - Returns:\n    - None\n  - Exceptions:\n    - ValueError: If the result is not valid.\n\nThis summary provides a clear overview of the phpleague.php file, detailing its purpose, dependencies, classes, and functions to assist developers in understanding and utilizing the code effectively.",
    "assets/css/phpleague-front.src.css": "File: phpleague.css\n\nModule Overview:\n\n  Purpose: This file contains styling rules for a PHP league table displayed on a web page.\n  Dependencies: \n  - Images: The file depends on images for displaying icons related to promotion, relegation, and favorites.\n\nClasses:\n\nNo classes defined in this file.\n\nFunctions:\n\nNo functions defined in this file.\n\nThis file primarily focuses on styling the PHP league table by defining CSS rules for various elements such as the table, captions, table cells, and images. It includes styling for promotion, relegation, and favorite icons, as well as specific styling for certain table rows.",
    "assets/js/admin.js": "File Summary: adminpanel.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for managing the admin panel interface, including displaying panels and handling player actions.\n  Dependencies: \n  - jQuery: A fast, small, and feature-rich JavaScript library.\n  - jQuery Mask Plugin: A jQuery plugin to make input masks on form fields.\n\nClasses:\n\n  None\n\nFunctions:\n\n  panel():\n  - Purpose: Handles the display of admin panel menus and content boxes.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\n  player():\n  - Purpose: Handles the deletion of player team records.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\n  toggleDisabled():\n  - Purpose: Toggles the disabled attribute of form inputs.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\nAdditional Notes:\n- The module initializes the panel and player functions on document ready.\n- It includes event listeners for clicking on certain elements and handling post requests.\n- It utilizes the jQuery Mask Plugin for input masking functionality.",
    "assets/js/jquery.maskedinput.js": "File Summary: Masked Input plugin for jQuery\n\nModule Overview:\n\n  Purpose: This file contains a jQuery plugin for creating masked input fields, allowing users to input data in a specific format (e.g., phone numbers, dates).\n  Dependencies: This file depends on jQuery.\n\nFunctions:\n\n  caret(begin: number, end: number) -> jQuery object:\n  - Purpose: Sets or gets the caret position in the input field.\n  - Arguments:\n    - begin (number): The start position of the caret.\n    - end (number): The end position of the caret.\n  - Returns: jQuery object\n\n  unmask() -> jQuery object:\n  - Purpose: Removes the mask from the input field.\n  - Returns: jQuery object\n\n  mask(mask: string, settings: object) -> jQuery object:\n  - Purpose: Applies a mask to the input field based on the provided mask string.\n  - Arguments:\n    - mask (string): The mask pattern to apply.\n    - settings (object): Additional settings for the mask.\n  - Returns: jQuery object\n  - Exceptions: None\n\n  keydownEvent(e: Event) -> boolean:\n  - Purpose: Handles keydown events for the input field.\n  - Arguments:\n    - e (Event): The keydown event object.\n  - Returns: boolean\n\n  keypressEvent(e: Event) -> boolean:\n  - Purpose: Handles keypress events for the input field.\n  - Arguments:\n    - e (Event): The keypress event object.\n  - Returns: boolean\n\n  clearBuffer(start: number, end: number) -> void:\n  - Purpose: Clears the buffer within a specified range.\n  - Arguments:\n    - start (number): The start index of the buffer.\n    - end (number): The end index of the buffer.\n  - Returns: void\n\n  writeBuffer() -> string:\n  - Purpose: Writes the buffer content to the input field.\n  - Returns: string\n\n  checkVal(allow: boolean) -> number:\n  - Purpose: Checks the input value against the mask pattern.\n  - Arguments:\n    - allow (boolean): Flag to allow partial values.\n  - Returns: number\n  - Exceptions: None\n\nThis file provides a jQuery plugin for creating masked input fields, allowing developers to enforce specific input formats for user data entry. The plugin includes functions for setting and getting the caret position, applying and removing masks, and handling key events for input validation.",
    "assets/js/original js files/admin.js": "File Summary: adminpanel.js\n\nModule Overview:\n\n  Purpose: This module provides functionality for managing the admin panel menu and content boxes on the application's admin dashboard.\n  Dependencies: \n  - jQuery: A fast, small, and feature-rich JavaScript library.\n  - jQuery Mask Plugin: A jQuery plugin to make input masks on form fields.\n\nFunctions:\n\n  panel():\n  - Purpose: Handles the visibility and interaction of the admin panel menu and content boxes.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\n  player():\n  - Purpose: Manages the deletion of player team history and updates the UI accordingly.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\nAdditional Notes:\n- The file also includes a custom jQuery function to toggle the disabled state of form inputs.\n- It includes event handlers for clicking on menu links, toggling content boxes, and expanding/collapsing sections.\n- The file utilizes AJAX post requests for deleting player team history.\n- It includes input masking for time and date fields.\n- The file is structured to handle user interactions and data manipulation within the admin panel interface.",
    "assets/js/original js files/admin.src.js": "Module Overview:\n\n  Purpose: This module provides functionality for managing an admin panel in the application, allowing users to interact with different sections and content.\n\n  Dependencies: \n  - jQuery: A fast, small, and feature-rich JavaScript library.\n  - jQuery Mask Plugin: A jQuery plugin to make input masks on form fields.\n\nFunctions:\n\n  panel():\n  - Purpose: Handles the functionality of displaying and interacting with the admin panel menu links and content boxes.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\n  player():\n  - Purpose: Manages the deletion of a player's team history.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\n  toggleDisabled():\n  - Purpose: Toggles the disabled attribute of an input field based on its class.\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\n  jQuery(document).ready():\n  - Purpose: Initializes the panel and player functions, sets up event listeners for input fields, and applies input masks.\n  - Arguments: jQuery\n  - Returns: None\n  - Exceptions: None",
    "assets/js/original js files/jquery.maskedinput.js": "File Summary: jquery.mask.js\n\nModule Overview:\n\nPurpose: This module provides functionality for masking input fields, allowing for the formatting of user input based on a specified mask pattern.\n\nDependencies:\n- jQuery: The jQuery library is required for this module to function properly.\n\nFunctions:\n\nmask(mask: str, settings: object) -> jQuery:\n- Purpose: Applies a mask to the input field based on the specified mask pattern.\n- Arguments:\n  - mask (str): The mask pattern to apply to the input field.\n  - settings (object): Additional settings for customizing the mask behavior.\n- Returns:\n  - jQuery: The jQuery object for method chaining.\n- Exceptions:\n  - None\n\nunmask() -> jQuery:\n- Purpose: Removes the mask from the input field.\n- Arguments:\n  - None\n- Returns:\n  - jQuery: The jQuery object for method chaining.\n- Exceptions:\n  - None\n\ncaret(begin: number, end: number) -> jQuery:\n- Purpose: Sets or retrieves the caret position within the input field.\n- Arguments:\n  - begin (number): The starting position of the caret.\n  - end (number): The ending position of the caret.\n- Returns:\n  - jQuery: The jQuery object for method chaining.\n- Exceptions:\n  - None\n\nOverall, the jquery.mask.js file provides a set of functions for masking input fields with a specified pattern, allowing for the formatting of user input. It relies on the jQuery library for its functionality.",
    "assets/js/original js files/jquery.maskedinput.src.js": "File Summary: Masked Input plugin for jQuery\n\nModule Overview:\n\n  Purpose: This file contains a jQuery plugin for creating masked input fields, allowing users to input data in a specific format (e.g., phone numbers, dates).\n  Dependencies: This file depends on jQuery.\n\nFunctions:\n\n  caret(begin: number, end: number) -> jQuery object:\n  - Purpose: Sets or gets the caret position in the input field.\n  - Arguments:\n    - begin (number): The start position of the caret.\n    - end (number): The end position of the caret.\n  - Returns: jQuery object\n\n  unmask() -> jQuery object:\n  - Purpose: Removes the mask from the input field.\n  - Returns: jQuery object\n\n  mask(mask: string, settings: object) -> jQuery object:\n  - Purpose: Applies a mask to the input field based on the provided mask string.\n  - Arguments:\n    - mask (string): The mask pattern to apply.\n    - settings (object): Additional settings for the mask.\n  - Returns: jQuery object\n\n  keydownEvent(e: Event) -> boolean:\n  - Purpose: Handles keydown events for the input field.\n  - Arguments:\n    - e (Event): The keydown event object.\n  - Returns: boolean\n\n  keypressEvent(e: Event) -> boolean:\n  - Purpose: Handles keypress events for the input field.\n  - Arguments:\n    - e (Event): The keypress event object.\n  - Returns: boolean\n\n  clearBuffer(start: number, end: number) -> void:\n  - Purpose: Clears the buffer within a specified range.\n  - Arguments:\n    - start (number): The start index of the buffer.\n    - end (number): The end index of the buffer.\n  - Returns: void\n\n  writeBuffer() -> string:\n  - Purpose: Writes the buffer content to the input field.\n  - Returns: string\n\n  checkVal(allow: boolean) -> number:\n  - Purpose: Checks the input value against the mask pattern.\n  - Arguments:\n    - allow (boolean): Flag to allow partial values.\n  - Returns: number\n\nThis file provides a jQuery plugin for creating masked input fields, allowing developers to enforce specific input formats for user data entry. The plugin includes functions for setting and getting the caret position, applying and removing masks, handling key events, and validating input values against the mask pattern.",
    "assets/js/tinymce/editor_plugin.js": "Module Overview:\n\n  Purpose: The PHPLeague module is a TinyMCE plugin that provides functionality for working with PHPLeague content within the TinyMCE editor.\n  \n  Dependencies: \n  - TinyMCE: The TinyMCE library for integrating rich text editing capabilities.\n  \nClasses:\n\n  PHPLeague:\n  - Purpose: Represents the PHPLeague TinyMCE plugin.\n  - Attributes: None\n  - Methods:\n    - init(ed: Editor, url: string) -> None: Initializes the PHPLeague plugin within the TinyMCE editor.\n          - Args:\n            - ed (Editor): The TinyMCE editor instance.\n            - url (string): The base URL for the plugin resources.\n    - createControl(n: Node, cm: ControlManager) -> null: Creates a control for the plugin.\n          - Args:\n            - n (Node): The node to create the control for.\n            - cm (ControlManager): The control manager instance.\n    - getInfo() -> object: Retrieves information about the plugin.\n          - Returns:\n            - object: An object containing information about the plugin.\n  \nFunctions: None",
    "assets/js/tinymce/tinymce.js": "File Summary: phpleague.js\n\nModule Overview:\n\n  Purpose: This file contains functions related to inserting PHP League content into the application using TinyMCE.\n  Dependencies: \n  - TinyMCEPopup: A library for creating popups in TinyMCE.\n\nFunctions:\n\n  init():\n  - Purpose: Resizes the TinyMCE popup to fit its inner content.\n\n  insertPHPLeague():\n  - Purpose: Inserts PHP League content based on the selected mode (tables, fixtures, fixture, clubs).\n  - Arguments: None\n  - Returns: None\n  - Exceptions: None\n\nThis file provides functionality for dynamically inserting PHP League content into the application using TinyMCE. The insertPHPLeague function handles different modes (tables, fixtures, fixture, clubs) and generates the appropriate shortcode based on user input. The function then inserts the shortcode into the TinyMCE editor and closes the popup."
}